---
title: "COMPRESSOR_Governance"
author: "Corey Scholes"
affiliation: "EBM Analytics"
version: 3.0
type: "website"
number-sections: true
number-depth: 3
date: "2025-Jul-30"
date-modified: "2025-Jul-30"

bibliography: CompressorGov references.bib

editor:
  visual
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    
execute: 
  echo: false
  warning: false
  message: false
---

# Preamble

The following analysis is a report on the activity, quality and data contained in the COMPRESSOR registry, which is described in the [registry wiki](https://sites.google.com/ebma.com.au/compressor-registry/home?authuser=0).

Analysis packages were loaded initially into the *R* environment.

```{r}
#| label: load-packages

if (!require("pacman")) install.packages("pacman")
pacman::p_load(# Load required packages
  "ggforce",
  "ggdag",
  "ggmap",
  "geosphere",
  "dplyr",
  "flextable",
  "litedown",
  "grateful",
  "modelsummary",
  "quantreg",
  "readr",
  "knitr",
  "cardx",
  "forcats",
  "gargle",
  "googledrive",
  "googlesheets4",
  "openxlsx2",
  "tidyverse",
  "tidymodels",
  "lubridate",
  "consort",
  "gtsummary",
  "survival",
  "ggplot2",
  "ggdist",
  "ggfortify",
  "ggsurvfit",
  "mice",
  "marginaleffects",
  "naniar",
  "quantreg",
  "broom",
  "epoxy",
  "broom.helpers",
  "stringr"
  )
  
  
```

Access to the COMPRESSOR datasets was pre-authorised.

```{r}
#| label: auth2
#| echo: false

options(
  gargle_oauth_cache = ".secrets",
  gargle_oauth_email = TRUE
)

googledrive::drive_auth(
  cache = ".secrets", 
  email = TRUE
  )
```

A function was generated to retrieve files using the *googledrive* package, to call on later in the analysis for processing data imports.

```{r}
#| label: folder
#| echo: false

base_folder_id1 <- "1c08mZXSxqhJx5IniJ1ur3YpWpgWXUoIO"




```

```{r}
get_specific_snapshot <- function(folder_name, base_folder_id = base_folder_id1) {
  tryCatch({
    # Check if the folder exists in the base directory
    folder <- googledrive::drive_ls(as_id(base_folder_id), pattern = paste0("^", folder_name, "$"))
    
    if(nrow(folder) == 0) {
      stop(paste("Folder", folder_name, "not found"))
    }
    
    # Find the snapshot file in the specified folder
    snapshot_file <- googledrive::drive_ls(
      folder$id, 
      pattern = "Registry data snapshot\\.xlsx$"
    )
    
    if(nrow(snapshot_file) == 0) {
      stop("No snapshot file found in specified folder")
    }
    
    # Return both pieces of information as a list
    return(list(
      snapshot = snapshot_file,
      folder_name = folder$name
    ))
    
  }, error = function(e) {
    stop(paste("Error finding specified snapshot:", e$message))
  })
}
```

Data was retrieved from live database tables. Source files were specified and stored as global variables to call on in further functions.

```{r}
#| label: live-table
#| echo: false

SheetIDs <- list(
DbSS = "https://docs.google.com/spreadsheets/d/1ZqqVDOy2Gsq1E0mKAuQokfNyccpNUt4x0EJC156T90Q/edit"
)

# Treatments Masterlist - Timestamp is > Registry Start date (gsuite)

```

```{r}
#| label: read-tables

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())



ComplicTable <- googlesheets4::read_sheet(
  ss = SheetIDs$DbSS,
  sheet = "Complications", 
  col_names = TRUE, 
  col_types = "cccTciicicccccccccccccccccDccD"
  )


#To match to acctData
PatientTable <- googlesheets4::range_read(
  ss = SheetIDs$DbSS,
  sheet = "Patient", 
  range = "A10:R",
  col_names = FALSE, 
  col_types = "DccccDcccDcicccDci"
  )


Patient_Col <- c(
  "PatientCreationDate",
  "PatientID",
  "LastName",	
  "FirstName",	
  "AlternateID",	
  "DateOfBirth",	
  "Sex",	
  "RegistryStatus",	
  "RegistryStatusNotes",	
  "DateRegistryStatus",	
  "NotificationMethod",	
  "NoTreatmentRECORDs",	
  "Email",	
  "Phone",
  "PatientRegistrationStatus",
  "DatePatientRegistration",
  "DominantSide",
  "TrueNoTreatments"
)

colnames(PatientTable) <- Patient_Col


```

A static registry snapshot was retrieved and formatted based on the fixed date of preparation of the snapshot (29-Jul-2025).

```{r}

# Authenticate for sheets using the same token
gs4_auth(token = drive_token())

# To get a snapshot from a specific folder (e.g., "20230415")
specific_snapshot <- get_specific_snapshot("20250731")


```

```{r}

temp_file1 <- tempfile(fileext = ".xlsx")
drive_download(
  file = specific_snapshot$snapshot$id,
  path = temp_file1,
  overwrite = TRUE
)

# Correction to reset back to excel origin
DaysDiff <- as.numeric(as.duration(interval(ymd("1899-12-30"), ymd("1970-01-01"))),"days")


Snapshot <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Combined",
  colNames = TRUE,
  detectDates = TRUE
  ) |> mutate(
    PatientID = stringr::str_split_i(TreatmentID,"\\.",1),
    SurgicalTreatment2 = case_when(
      stringr::str_detect(str_to_lower(EBMAComment),"surgery recommended") & SurgicalTreatment == "Non-Surgical" ~ "Surgery recommended",
      .default = SurgicalTreatment
    ),
    Sex2 = if_else(
      stringr::str_detect(str_to_lower(Sex), "f"),
      "Female",
      "Male"
    ),
    Retrospective = if_else(
      stringr::str_detect(str_to_lower(AnalysisLabel), "retrospective", negate = TRUE) | is.na(AnalysisLabel),
      "No",
      "Yes"
    ),
    Planned = if_else(
      stringr::str_detect(str_to_lower(AnalysisLabel), "plan"),
      "Yes",
      "No"
    ),
    Hardware = str_extract(str_to_lower(AnalysisLabel), "\\b[a-z]{1,5}\\b")
  ) |> unite(
  col = "CombID",
  sep = ".",
  c("PatientID","AffectedSide"),
  remove = FALSE
)



STROBEInput <- openxlsx2::wb_to_df(
  temp_file1,
  sheet = "Strobe_Input",
  colNames = TRUE,
  detectDates = TRUE
  )

```

# Context

COMPRESSOR (Complex Reconstructive Surgery Outcomes Registry) is a clinical quality registry supporting the practices of one surgeon in Sydney, New South Wales. It has been in operation over two distinct periods, with upper and lower limb tumour cohorts, as well as tumour of the pelvis and reintervention arthroplasty cohorts of the hip and knee.

# Recruitment Flow by Region

Flowcharts as per STROBE [@Vandenbroucke2007] and RECORD [@Benchimol2015] guidelines were generated for treatments enrolled into the Registry. Followup was set to eligibility at *any postoperative timepoint*.

```{r}


STROBEFlow2 <- STROBEInput |> 
  # Filter out rows with missing TreatmentID
  dplyr::filter(!is.na(TreatmentID)) |> 
  # Join with relevant columns from Snapshot
  dplyr::left_join(
    Snapshot |> 
      dplyr::select(
        TreatmentID,
        CombID,
        DateInitialExamination,
        EligibleAtPreop,
        EligibleAtx3months,
        EligibleAtx6months,
        EligibleAtx12months,
        EligibleAtx60months,
        EligibleAtx120months,
        SurgicalTreatment2
      ) |> 
      # Convert all date columns to date format
      dplyr::mutate(
        across(contains("Date"), lubridate::ymd)
      ),
    # Explicitly specify join column
    by = "TreatmentID"
  ) |> dplyr::mutate(
    TreatmentStatus2 = if_else(
          TreatmentStatus == "No further followup" & is.na(DateTreatment),
          "Archived",
          TreatmentStatus
  ),
  EligibleFU = if_else(
   EligibleAtx3months == "Yes" | EligibleAtx6months == "Yes" | EligibleAtx12months == "Yes" | EligibleAtx60months == "Yes" | EligibleAtx120months == "Yes",
    "Yes",
    "No"
  )
  )

```

```{r}

CurrentDate <- as.character("20250731")

STROBEFlow3 <- STROBEFlow2 |> dplyr::mutate(
    exclusion1 = case_when(
    is.na(SurgicalTreatment2) ~ "Not a surgical treatment",
    SurgicalTreatment2 == "Surgical" & stringr::str_detect(RegistryStatus,"Opt-out") ~ "Patient Opt-Out",
    SurgicalTreatment2 == "Surgical" & is.na(RegistryCohortName) ~ "No cohort",
    SurgicalTreatment2 == "Surgical" ~ NA_character_,
    .default = "Not a surgical treatment"
  ),
  followup = if_else(
    is.na(exclusion1),
    TreatmentID,
    NA_character_
  ),
  lost_followup = case_when(
    is.na(exclusion1) & TreatmentStatus2 == "Failed" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Procedure failure",
    is.na(exclusion1) & TreatmentStatus2 == "No further followup" & (ymd(DateStatusChange) < ymd(CurrentDate)) ~ "Treatment Progression End",
    is.na(exclusion1) & EligibleFU == "No" ~ "Not eligible for followup"
  ),
  mitt = if_else(
    !is.na(followup) & is.na(lost_followup),
    TreatmentID,
    NA_character_
)
) |> dplyr::rename(
  trialno = "TreatmentID",
  arm3 = "RegistryCohortName"
)

```

```{r}
#| label: fig-strobe-cohort1
#| fig-cap: "Flowchart of extraction and followup of surgical sample from the Registry - 1"


STROBEPlot1 <- consort_plot(
  data = STROBEFlow3 |> dplyr::filter(
    arm3 == "TumourLowerLimb" | arm3 == "ReinterventionTKA" | arm3 == "TumourPelvis"
  ),
 orders = c(
   trialno = "Population",
   exclusion1 = "Ineligible",
   trialno = "Baseline Analysis",
   arm3 = "Cohort",
   lost_followup = "Excluded",
   mitt = "Followup Analysis"
   ),
 side_box = c(
   "exclusion1",
   "lost_followup"
   ),
 allocation = "arm3",
 cex = 0.6
)

knitr::knit_print(STROBEPlot1)

```

```{r}
#| label: fig-strobe-cohort2
#| fig-cap: "Flowchart of extraction and followup of surgical sample from the Registry - 2"


STROBEPlot2 <- consort_plot(
  data = STROBEFlow3 |> dplyr::filter(
    arm3 == "TumourUpperLimb" | arm3 == "ReinterventionTHA" | arm3 == "General"
  ),
 orders = c(
   trialno = "Population",
   exclusion1 = "Ineligible",
   trialno = "Baseline Analysis",
   arm3 = "Cohort",
   lost_followup = "Excluded",
   mitt = "Followup Analysis"
   ),
 side_box = c(
   "exclusion1",
   "lost_followup"
   ),
 allocation = "arm3",
 cex = 0.6
)

knitr::knit_print(STROBEPlot2)

```

Cumulative recruitment over time was plotted from Registry inception to the present.

```{r}
#| label: fig-progress
#| fig-cap: "Cumulative (non-excluded) record creation within COMPRESSOR from inception to present"


RecordCount <- dplyr::summarise(
  STROBEFlow3 |>  dplyr::filter(
    !(TreatmentStatus == "Archived")
    ),
  Count = n(),
  .by = PatientCreationDate
) |> arrange(
  PatientCreationDate
) |> dplyr::mutate(
  CumulativeCount = cumsum(Count),
  PatientCreationNum = as.numeric(PatientCreationDate)
  ) |> filter(
    !(PatientCreationDate < ymd("20160701"))
   
  )

cumulative_plot <- ggplot(RecordCount, aes(x = PatientCreationDate, y = CumulativeCount)) +
  geom_line(color = "#2c3e50", size = 1) +
  # Add the spline fit with confidence interval
  geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), 
              color = "#e74c3c", size = 1.2, se = TRUE, fill = "#e74c3c", alpha = 0.2) +
  geom_point(color = "#3498db", size = 1) +
  # Add labels and title
  labs(
    title = "Cumulative Patient Count Over Time",
    x = "Date",
    y = "Cumulative Number of Patients",
    #caption = "Data source: STROBEFlow3"
  ) +
  # Improve the theme and formatting
  theme_minimal() +
  theme(
    plot.title = element_text(face = "bold", size = 14),
    axis.title = element_text(face = "bold"),
    panel.grid.minor = element_blank()
  )

# Print the plot
knitr::knit_print(cumulative_plot)


```

# Missingness and Compliance

## Baseline

```{r}
#| label: fig-baseline-miss
#| fig-cap: "Missingness of baseline PROMs and intraoperative date by registry cohort"

gg_miss_fct(Snapshot |> dplyr::filter(
      EligibleAtPreop == "Yes",
      SurgicalTreatment2 == "Surgical"
      ) |> dplyr::select(
        VR12PCS_Preop,
        #PatientPosition,
        #TreatmentProvider, 
        RegistryCohortName
        ), 
      RegistryCohortName
      )


```

Missingness for baseline PROMs (represented by VR12, common to all cohorts) is captured in @fig-baseline-prom-miss.

Overall, there are variable response rates for scores across cohorts.

## Patient-reported Outcomes by TimePoint

```{r}
min_percent <- 10
max_percent <- 100  # Or another value that encompasses all your data
```

```{r}
#| label: fig-vr12-miss
#| fig-cap: "Missingness of VR12 by Timepoint across all cohorts"

PROMVR12 <- Snapshot |> dplyr::select(
  TreatmentID,
  starts_with("VR12"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename_with(
  ~gsub("VR12_PCS","VR12PCS",.x, fixed = TRUE)
) |> dplyr::rename(
  EligibleAt_Preop = "EligibleAtPreop"
  ) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","6months","12months","24months", "60months", "120months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  Snapshot |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2,
    RegistryCohortName
  ),
  by = "TreatmentID"
)

gg_miss_fct(PROMVR12 |> dplyr::filter(
      !is.na(EligibleAt),
      SurgicalTreatment2 == "Surgical"
      ) |> dplyr::select(
        VR12PCS,
        TimePoint
        ), 
      TimePoint
      ) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )


```

```{r}
#| label: fig-msts-miss
#| fig-cap: "Missingness of MSTS by Timepoint in the TumourPelvis cohort"

Snapshot2 <- Snapshot |> dplyr::filter(
  !(RegistryCohortName == "TumourUpperLimb" | RegistryCohortName == "General")
  ) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename_with(
  ~gsub("MSTSLower_Total","MSTSLowerTotal",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMMSTS <- Snapshot2 |> dplyr::select(
  TreatmentID,
  starts_with("MSTSLowerTotal"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","6months","12months","24months", "60months", "120months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
   EligibleAt == "Yes",
   !is.na(TimePoint)
 ) |> left_join(
   Snapshot2 |> dplyr::select(
     TreatmentID,
     SurgicalTreatment2,
     RegistryCohortName
   ),
   by = "TreatmentID"
 )
# 
# 
# 
gg_miss_fct(PROMMSTS |> dplyr::filter(SurgicalTreatment2 == "Surgical") |> dplyr::select(MSTSLowerTotal,TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

```{r}
#| label: fig-hoos12-miss
#| fig-cap: "Missingness of HOOS12 by Timepoint in Surgical Cases"


Snapshot3 <- Snapshot |> dplyr::filter(
  (RegistryCohortName == "ReinterventionTHA" | RegistryCohortName == "TumourPelvis")
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> rename_with(
  ~gsub("HOOS12_Summary_TotalScore","HOOS12SummaryTotal",.x, fixed = TRUE)
) |> rename(
  EligibleAt_Preop = "EligibleAtPreop"
)

PROMHOOS12 <- Snapshot3 |> dplyr::select(
  TreatmentID,
  starts_with("HOOS12SummaryTotal"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","6months","12months","24months", "60months", "120months"), ordered = TRUE, exclude = NA),
  HOOS12SummaryTotal = as.numeric(HOOS12SummaryTotal)
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  Snapshot3 |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2,
    TreatmentType,
    TreatmentStatus
  ),
  by = "TreatmentID"
)



gg_miss_fct(PROMHOOS12 |> dplyr::filter(SurgicalTreatment2 == "Surgical") |> dplyr::select(contains("HOOS12SummaryTotal"), TimePoint), TimePoint) +
  scale_fill_gradient(
    low = "steelblue",     # Color for low missingness values
    high = "darkred",      # Color for high missingness values
    limits = c(min_percent, max_percent),    # Consistent scale limits
    name = "% Missing"     # Legend title
  )
```

# Cohort Analysis

The VR12 is a *general* health questionnaire that is presented to *all* patients enrolled in the registry.

```{r}
#| label: fig-vr12-cohort
#| fig-cap: "Summary of VR12 at 12months by cohort"

Snapshot <- dplyr::mutate(
  Snapshot,
  across(contains("Score"), ~as.numeric(.))
)

FigureVR12 <- Snapshot |> dplyr::filter(SurgicalTreatment2 == "Surgical") |>
  ggplot(aes(y = RegistryCohortName, x = VR12PCS_12months)) +
  stat_halfeye()


knitr::knit_print(FigureVR12)

```

Between-cohort variability is observed for the Physical Component Score of the VR12. Most notable is the high variation within all cohorts.

```{r}
#| label: fig-msts
#| fig-cap: "Summary of MSTS by Timepoint"

#preop_position <- which(levels(PROMQDASH$TimePoint) == "Preop")

FigureMSTS <- PROMMSTS |> dplyr::filter(
  !(is.na(SurgicalTreatment2)),
  !is.na(MSTSLowerTotal)
) |> ggplot(aes(y = MSTSLowerTotal, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add appropriate scale colors "Surgery recommended" = "darkred"
  scale_fill_manual(values = c(
    "Surgical" = "steelblue", 
    "Non-Surgical" = "darkgray",
    "Surgery recommended" = "darkred"
    )
    ) +
  scale_color_manual(values = c(
    "Surgical" = "steelblue4", 
    "Non-Surgical" = "dimgray",
    "Surgery recommended" = "darkred"
    )
    ) +
  labs(
    y = "MSTSLowerTotal",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) + facet_wrap(
    ~RegistryCohortName, ncol = 2
  )

knitr::knit_print(FigureMSTS)
```

## Tumour Pelvis

```{r}
#| label: tbl-tp-demographics
#| tbl-cap: "Summary of demographics in the Tumour Pelvis cohort"

TableTPdemo <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    RegistryCohortName == "TumourPelvis"
  ) |> dplyr::select(
    TreatmentType,
    SurgicalTreatment2,
    TreatmentStatus,
    DateInitialExamination,
    AgeAtInitialExam,
    AgeAtTreatment,
    Sex2,
    Retrospective,
    Planned,
    Hardware

   #EducationLevel_Preop,
   # DiagnosisPrimary
  ),
  by = "SurgicalTreatment2",
  missing = "no",
  statistic = list(
    DateInitialExamination ~ "{min} - {max}"
  )
)

knitr::knit_print(TableTPdemo)
```

```{r}
#| label: survival-prep-tp

SnapshotTP <- Snapshot |> dplyr::filter(
  RegistryCohortName == "TumourPelvis"
)

SnapshotTP2 <- SnapshotTP |> dplyr::mutate(
  Status = if_else(
    TreatmentStatus == "Failed",
    1,
    0
  ),
  EndDate = case_when(
    !is.na(DateStatusChange) ~ DateStatusChange,
    .default = coalesce(DateStatusChange, ymd(CurrentDate)),
    ),
  Duration = as.numeric(as.duration(interval(ymd(DateTreatment), ymd(EndDate))),"years"),
)

```

```{r}
#| label: fig-survtp
#| fig-cap: "Survival curve for Tumour Pelvis cases by treatment type"


FigureSurvTP <- survfit2(Surv(Duration, Status) ~ SurgicalTreatment2,
                        data = SnapshotTP2
                        ) |> ggsurvfit(linewidth = 1) +
  add_confidence_interval() +
  add_risktable() +
  add_quantile(y_value = 0.5, color = "gray50", linewidth = 0.75) +
  scale_ggsurvfit() +
  coord_cartesian(ylim = c(0.2, 1))

knitr::knit_print(FigureSurvTP)

```

```{r}
#| label: tbl-survTP
#| tbl-cap: "Summary of Tumour Pelvis Procedure Survival"

TableSurvTP <- tbl_survfit(
  survfit2(Surv(Duration, Status) ~ SurgicalTreatment2, 
           data = SnapshotTP2),
  times = c(1,2,5,10),
  label_header = "**{time} Years**",
  label = "Procedure Survival",
  statistic = "{estimate} ({conf.low} - {conf.high})"
)

knitr::knit_print(TableSurvTP)

```

## Tumour Lower Limb

```{r}
#| label: tbl-tll-demographics
#| tbl-cap: "Summary of demographics in Tumour Lower Limb cohort"

TableTLLdemo <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    RegistryCohortName == "TumourLowerLimb"
  ) |> dplyr::select(
    TreatmentType,
    SurgicalTreatment2,
    TreatmentStatus,
    DateInitialExamination,
    AgeAtInitialExam,
    Sex2,
    Retrospective,
    Hardware
    # EducationLevel_Preop,
    # DiagnosisPrimary
  ),
  by = "SurgicalTreatment2",
  missing = "no",
  statistic = list(
    DateInitialExamination ~ "{min} - {max}"
  )
)

knitr::knit_print(TableTLLdemo)
```

```{r}


PROMBPI <- Snapshot |> dplyr::select(
  TreatmentID,
  starts_with("BPISFSeverityScore"),
  starts_with("EligibleAt"),
  -EligibleAtIntraop
) |> rename_with(
  ~gsub("Atx","At_",.x, fixed = TRUE)
) |> dplyr::rename(
  EligibleAt_Preop = "EligibleAtPreop"
  ) |> pivot_longer(
  cols = !TreatmentID,
  names_to = c(".value","TimePoint"),
  names_sep = "_",
  values_drop_na = TRUE
) |> mutate(
  TimePoint = factor(TimePoint, levels = c("Preop","3months","6months","12months","24months", "60months", "120months"), ordered = TRUE, exclude = NA),
) |> dplyr::filter(
  EligibleAt == "Yes",
  !is.na(TimePoint)
) |> left_join(
  Snapshot |> dplyr::select(
    TreatmentID,
    SurgicalTreatment2,
    RegistryCohortName,
    TreatmentType
  ),
  by = "TreatmentID"
)

```

```{r}
#| label: fig-bpi-tll
#| fig-cap: "Summary of Brief Pain Inventory - Severity by Timepoint for primary presentations of Tumour Lower Limb"

#preop_position <- which(levels(PROMGHI$TimePoint) == "Preop")

FigureBPISev <- PROMBPI |> dplyr::filter(
  SurgicalTreatment2 == "Surgical",
  RegistryCohortName == "TumourLowerLimb",
  TreatmentType == "Primary"
) |> ggplot(aes(y = BPISFSeverityScore, x = TimePoint, fill = SurgicalTreatment2, color = SurgicalTreatment2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add appropriate scale colors
  scale_fill_manual(values = c("Surgical" = "steelblue", "Non-Surgical" = "darkgray", "Surgery recommended" = "darkred")) +
  scale_color_manual(values = c("Surgical" = "steelblue4", "Non-Surgical" = "dimgray", "Surgery recommended" = "darkred")) +
  labs(
    y = "BPI Severity",
    x = "Time Point",
    fill = "Treatment",
    color = "Treatment"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )


knitr::knit_print(FigureBPISev)

```

```{r}
#| label: survival-prep-tll

SnapshotTLL <- Snapshot |> dplyr::filter(
  RegistryCohortName == "TumourLowerLimb",
  SurgicalTreatment2 == "Surgical",
  TreatmentType != "Revision"
)

SnapshotTLL2 <- SnapshotTLL|> dplyr::mutate(
  Status = if_else(
    TreatmentStatus == "Failed",
    1,
    0
  ),
  EndDate = case_when(
    !is.na(DateStatusChange) ~ DateStatusChange,
    .default = coalesce(DateStatusChange, ymd(CurrentDate)),
    ),
  Duration = as.numeric(as.duration(interval(ymd(DateTreatment), ymd(EndDate))),"years"),
)

```

```{r}
#| label: fig-survtll
#| fig-cap: "Survival curve for Tumour Lower Limb cases by treatment type"


FigureSurvTLL <- survfit2(Surv(Duration, Status) ~ TreatmentType,
                        data = SnapshotTLL2
                        ) |> ggsurvfit(linewidth = 1) +
  add_confidence_interval() +
  add_risktable() +
  add_quantile(y_value = 0.6, color = "gray50", linewidth = 0.75) +
  scale_ggsurvfit() +
  coord_cartesian(ylim = c(0.2, 1))

knitr::knit_print(FigureSurvTLL)

```

```{r}
#| label: tbl-survTLL
#| tbl-cap: "Summary of Tumour Lower Limb Procedure Survival"

TableSurvTLL <- tbl_survfit(
  survfit2(Surv(Duration, Status) ~ TreatmentType, 
           data = SnapshotTLL2),
  times = c(1,2,5,10),
  label_header = "**{time} Years**",
  label = "Procedure Survival",
  statistic = "{estimate} ({conf.low} - {conf.high})"
)

knitr::knit_print(TableSurvTLL)

```

## GMRS-MRH

```{r}
#| label: tbl-gmrs-demographics
#| tbl-cap: "Summary of demographics in GMRS-MRH cohort"

TableGMRSdemo <- gtsummary::tbl_summary(
  Snapshot |> dplyr::filter(
    stringr::str_detect(str_to_lower(Hardware), "gmrs|mrh"),
    RegistryCohortName != "TumourUpperLimb"
    
  ) |> dplyr::select(
    RegistryCohortName,
    TreatmentType,
    SurgicalTreatment2,
    TreatmentStatus,
    DateInitialExamination,
    AgeAtInitialExam,
    Sex2,
    Hardware,
    Retrospective
    # EducationLevel_Preop,
    # DiagnosisPrimary
  ),
  by = "RegistryCohortName",
  missing = "no",
  statistic = list(
    DateInitialExamination ~ "{min} - {max}"
  )
) |>
  add_overall()

knitr::knit_print(TableGMRSdemo)
```

```{r}
#| label: survival-prep-gmrs

SnapshotGMRS <- Snapshot |> dplyr::filter(
  Hardware == "gmrs" | Hardware == "mrh",
  SurgicalTreatment2 == "Surgical",
  Planned != "Yes"
) |> mutate(
  TreatmentType2 = if_else(
    stringr::str_detect(TreatmentType, "Revision"),
    "Revision",
    "Primary"
  )
)

SnapshotGMRS2 <- SnapshotGMRS |> dplyr::mutate(
  Status = if_else(
    TreatmentStatus == "Failed",
    1,
    0
  ),
  EndDate = case_when(
    !is.na(DateStatusChange) ~ DateStatusChange,
    .default = coalesce(DateStatusChange, ymd(CurrentDate)),
    ),
  Duration = as.numeric(as.duration(interval(ymd(DateTreatment), ymd(EndDate))),"years"),
)

```

```{r}
#| label: fig-survgmrs
#| fig-cap: "Survival curve for GMRS-MRH cases by treatment type"


FigureSurvGMRS <- survfit2(Surv(Duration, Status) ~ TreatmentType2,
                        data = SnapshotGMRS2
                        ) |> ggsurvfit(linewidth = 1) +
  add_confidence_interval() +
  add_risktable() +
  add_quantile(y_value = 0.6, color = "gray50", linewidth = 0.75) +
  scale_ggsurvfit() +
  coord_cartesian(ylim = c(0.2, 1))

knitr::knit_print(FigureSurvGMRS)

```

```{r}
#| label: tbl-survgmrs
#| tbl-cap: "Summary of GMRS-MRH Procedure Survival"

TableSurvGMRS <- tbl_survfit(
  survfit2(Surv(Duration, Status) ~ TreatmentType2, 
           data = SnapshotGMRS2),
  times = c(1,2,5,10),
  label_header = "**{time} Years**",
  label = "Procedure Survival",
  statistic = "{estimate} ({conf.low} - {conf.high})"
)

knitr::knit_print(TableSurvGMRS)

```

```{r}
PROMMSTS2 <- left_join(
  PROMMSTS,
  SnapshotGMRS |> dplyr::select(
    TreatmentID,
    Hardware,
    TreatmentType2
  ),
   by = "TreatmentID"
) |> filter(
  !is.na(Hardware)
)
```

```{r}
#| label: fig-msts2
#| fig-cap: "Summary of MSTS by Timepoint"

#preop_position <- which(levels(PROMQDASH$TimePoint) == "Preop")

FigureMSTS2 <- PROMMSTS2 |> filter(
  RegistryCohortName != "ReinterventionTHA"
  ) |> ggplot(aes(y = MSTSLowerTotal, x = TimePoint, fill = TreatmentType2, color = TreatmentType2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add appropriate scale colors "Surgery recommended" = "darkred"
  scale_fill_manual(values = c(
    "Primary" = "steelblue", 
    "Revision" = "darkred"
    )
    ) +
  scale_color_manual(values = c(
    "Primary" = "steelblue", 
    "Revision" = "darkred"
    )
    ) +
  labs(
    y = "MSTSLowerTotal",
    x = "Time Point",
    fill = "Treatment Type",
    color = "Treatment Type"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) + facet_wrap(
    ~RegistryCohortName, ncol = 2
  )

knitr::knit_print(FigureMSTS2)
```

```{r}
PROMVR122 <- left_join(
  PROMVR12,
  SnapshotGMRS |> dplyr::select(
    TreatmentID,
    Hardware,
    TreatmentType2
  ),
   by = "TreatmentID"
) |> filter(
  !is.na(Hardware)
)
```

```{r}
#| label: fig-vr122
#| fig-cap: "Summary of VR12 by Timepoint"

#preop_position <- which(levels(PROMQDASH$TimePoint) == "Preop")

FigureVR122 <- PROMVR122 |> filter(
  RegistryCohortName != "ReinterventionTHA"
  ) |> ggplot(aes(y = VR12PCS, x = TimePoint, fill = TreatmentType2, color = TreatmentType2)) +
  stat_halfeye(
    alpha = 0.5,  # Transparency for overlap visibility
    position = "identity",  # Overlay the distributions
    na.rm = TRUE,
    scale = 0.9  # Slightly scale down to avoid too much overlap
  ) +
  # Add appropriate scale colors "Surgery recommended" = "darkred"
  scale_fill_manual(values = c(
    "Primary" = "steelblue", 
    "Revision" = "darkred"
    )
    ) +
  scale_color_manual(values = c(
    "Primary" = "steelblue", 
    "Revision" = "darkred"
    )
    ) +
  labs(
    y = "MSTSLowerTotal",
    x = "Time Point",
    fill = "Treatment Type",
    color = "Treatment Type"
  ) +
  theme_minimal() +
  theme(
    legend.position = "top",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) + facet_wrap(
    ~RegistryCohortName, ncol = 2
  )

knitr::knit_print(FigureVR122)
```

# Observations \| Interpretation

-   PROMs feedback remains relatively sparse and should be interpreted with some caution

-   The followup of cases included in the registry remains largely cross-sectional, with few instances of serial capture of recovery

-   There are some noticeable trends with respect to pain (largely moderate at each timepoint) and physical function over time (linear decay for tumour lower limb) that point to the challenging recovery patients face after treatment.

# Recommendations

-   Continuing efforts to retrieve PROMs information from patients

-   Consider capture of intraoperative data on prospective or retrospective cases

-   Refine diagnosis coding within cohorts

-   Implement strategies to improve patient engagement at later followup timepoints

-   Identify additional opportunities for local/state data linkage activities to supplement outcomes tracking (complications, mortality, procedure survival)
